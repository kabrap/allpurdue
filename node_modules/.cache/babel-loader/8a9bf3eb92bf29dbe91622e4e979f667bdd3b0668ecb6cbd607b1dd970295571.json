{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrew\\\\Desktop\\\\allpurdue\\\\src\\\\pages\\\\Blog.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport BlogCard from '../components/card/BlogCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Blog() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [visiblePosts, setVisiblePosts] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    // Fetch all blog posts from API or some other data source\n    const fetchPosts = async () => {\n      const response = await fetch(\"https://example.com/posts\");\n      const data = await response.json();\n      setPosts(data);\n      setVisiblePosts(data.slice(0, 5)); // Show only the first 5 posts initially\n      setLoaded(true);\n    };\n    fetchPosts();\n  }, []);\n  useEffect(() => {\n    const handleScroll = () => {\n      const bottom = Math.ceil(window.innerHeight + window.scrollY) >= document.documentElement.scrollHeight;\n      if (bottom && loaded) {\n        // Load 5 more posts when the user reaches the bottom of the page\n        setVisiblePosts(prevPosts => prevPosts.concat(posts.slice(prevPosts.length, prevPosts.length + 5)));\n      }\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [posts, loaded]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: visiblePosts.map(post => /*#__PURE__*/_jsxDEV(BlogCard, {\n      likes: post.likes,\n      title: post.title,\n      author: post.author,\n      content: post.content\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(Blog, \"NyNPLvE13Z0emPCeNI1YEBLOEk4=\");\n_c = Blog;\nexport default Blog;\nvar _c;\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"names":["React","useState","useEffect","BlogCard","Blog","posts","setPosts","visiblePosts","setVisiblePosts","loaded","setLoaded","fetchPosts","response","fetch","data","json","slice","handleScroll","bottom","Math","ceil","window","innerHeight","scrollY","document","documentElement","scrollHeight","prevPosts","concat","length","addEventListener","removeEventListener","map","post","likes","title","author","content","id"],"sources":["C:/Users/Andrew/Desktop/allpurdue/src/pages/Blog.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport BlogCard from '../components/card/BlogCard'\r\n\r\nfunction Blog() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [visiblePosts, setVisiblePosts] = useState([]);\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Fetch all blog posts from API or some other data source\r\n    const fetchPosts = async () => {\r\n      const response = await fetch(\"https://example.com/posts\");\r\n      const data = await response.json();\r\n      setPosts(data);\r\n      setVisiblePosts(data.slice(0, 5)); // Show only the first 5 posts initially\r\n      setLoaded(true);\r\n    };\r\n\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      const bottom =\r\n        Math.ceil(window.innerHeight + window.scrollY) >=\r\n        document.documentElement.scrollHeight;\r\n\r\n      if (bottom && loaded) {\r\n        // Load 5 more posts when the user reaches the bottom of the page\r\n        setVisiblePosts((prevPosts) =>\r\n          prevPosts.concat(posts.slice(prevPosts.length, prevPosts.length + 5))\r\n        );\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n\r\n    return () => window.removeEventListener(\"scroll\", handleScroll);\r\n  }, [posts, loaded]);\r\n\r\n  return (\r\n    <div>\r\n      {visiblePosts.map((post) => (\r\n        <BlogCard\r\n          key={post.id}\r\n          likes={post.likes}\r\n          title={post.title}\r\n          author={post.author}\r\n          content={post.content}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Blog;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,6BAA6B;AAAA;AAElD,SAASC,IAAI,GAAG;EAAA;EACd,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE3CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,UAAU,GAAG,YAAY;MAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2BAA2B,CAAC;MACzD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAClCT,QAAQ,CAACQ,IAAI,CAAC;MACdN,eAAe,CAACM,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MACnCN,SAAS,CAAC,IAAI,CAAC;IACjB,CAAC;IAEDC,UAAU,EAAE;EACd,CAAC,EAAE,EAAE,CAAC;EAENT,SAAS,CAAC,MAAM;IACd,MAAMe,YAAY,GAAG,MAAM;MACzB,MAAMC,MAAM,GACVC,IAAI,CAACC,IAAI,CAACC,MAAM,CAACC,WAAW,GAAGD,MAAM,CAACE,OAAO,CAAC,IAC9CC,QAAQ,CAACC,eAAe,CAACC,YAAY;MAEvC,IAAIR,MAAM,IAAIT,MAAM,EAAE;QACpB;QACAD,eAAe,CAAEmB,SAAS,IACxBA,SAAS,CAACC,MAAM,CAACvB,KAAK,CAACW,KAAK,CAACW,SAAS,CAACE,MAAM,EAAEF,SAAS,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC,CACtE;MACH;IACF,CAAC;IAEDR,MAAM,CAACS,gBAAgB,CAAC,QAAQ,EAAEb,YAAY,CAAC;IAE/C,OAAO,MAAMI,MAAM,CAACU,mBAAmB,CAAC,QAAQ,EAAEd,YAAY,CAAC;EACjE,CAAC,EAAE,CAACZ,KAAK,EAAEI,MAAM,CAAC,CAAC;EAEnB,oBACE;IAAA,UACGF,YAAY,CAACyB,GAAG,CAAEC,IAAI,iBACrB,QAAC,QAAQ;MAEP,KAAK,EAAEA,IAAI,CAACC,KAAM;MAClB,KAAK,EAAED,IAAI,CAACE,KAAM;MAClB,MAAM,EAAEF,IAAI,CAACG,MAAO;MACpB,OAAO,EAAEH,IAAI,CAACI;IAAQ,GAJjBJ,IAAI,CAACK,EAAE;MAAA;MAAA;MAAA;IAAA,QAMf;EAAC;IAAA;IAAA;IAAA;EAAA,QACE;AAEV;AAAC,GAlDQlC,IAAI;AAAA,KAAJA,IAAI;AAoDb,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}